package com.i2hammad.admanagekit.admob;

import static androidx.lifecycle.Lifecycle.Event.ON_START;

import android.app.Activity;
import android.app.Application;
import android.os.Bundle;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.lifecycle.LifecycleObserver;
import androidx.lifecycle.OnLifecycleEvent;
import androidx.lifecycle.ProcessLifecycleOwner;

import com.google.android.gms.ads.AdError;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdValue;
import com.google.android.gms.ads.FullScreenContentCallback;
import com.google.android.gms.ads.LoadAdError;
import com.google.android.gms.ads.OnPaidEventListener;
import com.google.android.gms.ads.appopen.AppOpenAd;
import com.google.firebase.analytics.FirebaseAnalytics;
import com.i2hammad.admanagekit.billing.AppPurchase;

import java.util.HashSet;
import java.util.Set;

/**
 * Prefetches App Open Ads.
 */
public class AppOpenManager implements Application.ActivityLifecycleCallbacks, LifecycleObserver {
    private Activity currentActivity;
    private static final String LOG_TAG = "AppOpenManager";

    private AppOpenAd appOpenAd = null;
    private AppOpenAd.AppOpenAdLoadCallback loadCallback;
    private final Application myApplication;

    public static boolean isShowingAd = false;
    public static boolean isShownAd = false;
    private boolean skipNextAd = false;
    private String AD_UNIT_ID = "ca-app-pub-3940256099942544/9257395921";
    private FirebaseAnalytics firebaseAnalytics;

    private final Set<Class<?>> excludedActivities = new HashSet<>();

    /**
     * Shows the ad if one isn't already showing.
     */
    public void showAdIfAvailable() {
        if (currentActivity != null && excludedActivities.contains(currentActivity.getClass())) {
            Log.d(LOG_TAG, "Ad display is skipped for this activity.");
            fetchAd();
            return;
        }

        if (!isShowingAd && isAdAvailable() && !skipNextAd) {
            Log.e(LOG_TAG, "Will show ad.");

            FullScreenContentCallback fullScreenContentCallback = new FullScreenContentCallback() {
                @Override
                public void onAdDismissedFullScreenContent() {
                    AppOpenManager.this.appOpenAd = null;
                    isShowingAd = false;
                    fetchAd();
                }

                @Override
                public void onAdFailedToShowFullScreenContent(@NonNull AdError adError) {
                    // Log Firebase event for ad failed to load
                    Bundle params = new Bundle();
                    params.putString(FirebaseAnalytics.Param.AD_UNIT_NAME, AD_UNIT_ID);
                    params.putString("ad_error_code", adError.getCode() + "");
                    firebaseAnalytics.logEvent("ad_failed_to_load", params);
                }

                @Override
                public void onAdShowedFullScreenContent() {
                    isShowingAd = true;
                    isShownAd = true;

                    // Log Firebase event for ad impression
                    Bundle params = new Bundle();
                    params.putString(FirebaseAnalytics.Param.AD_UNIT_NAME, AD_UNIT_ID);
                    firebaseAnalytics.logEvent(FirebaseAnalytics.Event.AD_IMPRESSION, params);
                }
            };

            appOpenAd.setOnPaidEventListener(new OnPaidEventListener() {
                @Override
                public void onPaidEvent(@NonNull AdValue adValue) {
                    // Log Firebase event for revenue generated by the ad
                    double adValueInStandardUnits = adValue.getValueMicros() / 1_000_000.0;

                    Bundle revenueParams = new Bundle();
                    revenueParams.putString(FirebaseAnalytics.Param.AD_UNIT_NAME, AD_UNIT_ID);
                    revenueParams.putDouble(FirebaseAnalytics.Param.VALUE, adValueInStandardUnits);
                    revenueParams.putString(FirebaseAnalytics.Param.CURRENCY, adValue.getCurrencyCode());
                    firebaseAnalytics.logEvent("ad_paid_event", revenueParams);
                }
            });

            appOpenAd.setFullScreenContentCallback(fullScreenContentCallback);
            appOpenAd.show(currentActivity);
        } else {
            Log.d(LOG_TAG, "Cannot show ad.");
            fetchAd();
        }

        skipNextAd = false;
    }

    public void skipNextAd() {
        skipNextAd = true;
    }

    /**
     * Constructor
     */
    public AppOpenManager(Application myApplication, String adUnitId) {
        this.AD_UNIT_ID = adUnitId;
        this.myApplication = myApplication;
        this.myApplication.registerActivityLifecycleCallbacks(this);
        ProcessLifecycleOwner.get().getLifecycle().addObserver(this);

        // Initialize Firebase Analytics
        firebaseAnalytics = FirebaseAnalytics.getInstance(myApplication);
    }

    public void setAdUnitId(String adUnitId) {
        this.AD_UNIT_ID = adUnitId;
    }

    @OnLifecycleEvent(ON_START)
    public void onStart() {
        if (!AppPurchase.getInstance().isPurchased()) {
            showAdIfAvailable();
            Log.d(LOG_TAG, "onStart");
        }
    }

    /**
     * Request an ad
     */
    public void fetchAd() {
        if (isAdAvailable()) {
            return;
        }

        loadCallback = new AppOpenAd.AppOpenAdLoadCallback() {
            @Override
            public void onAdLoaded(@NonNull AppOpenAd ad) {
                AppOpenManager.this.appOpenAd = ad;
            }

            @Override
            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {
                Log.e(LOG_TAG, "onAdFailedToLoad: failed to load");

                // Log Firebase event for ad failed to load
                Bundle params = new Bundle();
                params.putString(FirebaseAnalytics.Param.AD_UNIT_NAME, AD_UNIT_ID);
                params.putString("ad_error_code", loadAdError.getCode() + "");
                firebaseAnalytics.logEvent("ad_failed_to_load", params);
            }
        };

        AdRequest request = getAdRequest();
        AppOpenAd.load(myApplication, AD_UNIT_ID, request, AppOpenAd.APP_OPEN_AD_ORIENTATION_PORTRAIT, loadCallback);
    }

    /**
     * Creates and returns ad request.
     */
    private AdRequest getAdRequest() {
        return new AdRequest.Builder().build();
    }

    /**
     * Utility method that checks if ad exists and can be shown.
     */
    public boolean isAdAvailable() {
        return appOpenAd != null;
    }

    @Override
    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
    }

    @Override
    public void onActivityStarted(Activity activity) {
        currentActivity = activity;
    }

    @Override
    public void onActivityResumed(Activity activity) {
        currentActivity = activity;
    }

    @Override
    public void onActivityStopped(Activity activity) {
    }

    @Override
    public void onActivityPaused(Activity activity) {
    }

    @Override
    public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
    }

    @Override
    public void onActivityDestroyed(Activity activity) {
        currentActivity = null;
    }

    /**
     * Adds an activity class to the set of excluded activities.
     */
    public void disableAppOpenWithActivity(Class<?> activityClass) {
        excludedActivities.add(activityClass);
    }

    /**
     * Removes an activity class from the set of excluded activities.
     */
    public void includeAppOpenActivityForAds(Class<?> activityClass) {
        excludedActivities.remove(activityClass);
    }
}
