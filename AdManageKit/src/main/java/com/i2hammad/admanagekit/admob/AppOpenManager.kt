package com.i2hammad.admanagekit.admob;

import android.app.Activity
import android.app.Application
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.ProcessLifecycleOwner
import com.google.android.gms.ads.*
import com.google.android.gms.ads.appopen.AppOpenAd
import com.google.firebase.analytics.FirebaseAnalytics
import com.i2hammad.admanagekit.core.BillingConfig
import com.i2hammad.admanagekit.config.AdManageKitConfig
import com.i2hammad.admanagekit.utils.AdDebugUtils
import com.i2hammad.admanagekit.utils.AdRetryManager

//import com.i2hammad.admanagekit.billing.AppPurchase

/**
 * Prefetches App Open Ads.
 */
class AppOpenManager(private val myApplication: Application, private var adUnitId: String) :
    Application.ActivityLifecycleCallbacks, DefaultLifecycleObserver {

    private var currentActivity: Activity? = null
    private var appOpenAd: AppOpenAd? = null

    private val excludedActivities: MutableSet<Class<*>> = HashSet()

    private var skipNextAd = false
    private val firebaseAnalytics: FirebaseAnalytics = FirebaseAnalytics.getInstance(myApplication)
    
    // Retry and circuit breaker state
    private var failureCount = 0
    private var lastFailureTime = 0L
    private var isCircuitBreakerOpen = false
    private val retryAttempts = mutableMapOf<String, Int>()

    init {
        myApplication.registerActivityLifecycleCallbacks(this)
        ProcessLifecycleOwner.get().lifecycle.addObserver(this)
    }

    companion object {
        private const val LOG_TAG = "AppOpenManager"
        var isShowingAd = false
        var isShownAd = false
    }

    /**
     * Shows the ad if one isn't already showing.
     */
    fun showAdIfAvailable() {
        if (currentActivity != null && excludedActivities.contains(currentActivity!!::class.java)) {
            Log.d(LOG_TAG, "Ad display is skipped for this activity.")
            fetchAd()
            return
        }

        if (!isShowingAd && isAdAvailable() && !skipNextAd && !AdManager.getInstance().isDisplayingAd() && shouldAttemptLoad()) {
            Log.e(LOG_TAG, "Will show ad.")

            val fullScreenContentCallback = object : FullScreenContentCallback() {
                override fun onAdDismissedFullScreenContent() {
                    appOpenAd = null
                    isShowingAd = false
                    AdDebugUtils.logEvent(adUnitId, "onAdDismissed", "App open ad dismissed", true)
                    fetchAd()
                }

                override fun onAdFailedToShowFullScreenContent(adError: AdError) {
                    AdDebugUtils.logEvent(adUnitId, "onFailedToShow", "App open ad failed to show: ${adError.message}", false)
                    // Log Firebase event for ad failed to load
                    val params = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                        putString("ad_error_code", adError.code.toString())
                        if (AdManageKitConfig.enablePerformanceMetrics) {
                            putString("error_message", adError.message)
                        }
                    }
                    firebaseAnalytics.logEvent("ad_failed_to_load", params)
                }

                override fun onAdShowedFullScreenContent() {
                    isShowingAd = true
                    isShownAd = true
                    AdDebugUtils.logEvent(adUnitId, "onAdImpression", "App open ad shown", true)

                    // Log Firebase event for ad impression
                    val params = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                    }
                    firebaseAnalytics.logEvent(FirebaseAnalytics.Event.AD_IMPRESSION, params)
                }
            }

            appOpenAd?.apply {
                setOnPaidEventListener { adValue ->
                    // Log Firebase event for revenue generated by the ad
                    val adValueInStandardUnits = adValue.valueMicros / 1_000_000.0

                    val revenueParams = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                        putDouble(FirebaseAnalytics.Param.VALUE, adValueInStandardUnits)
                        putString(FirebaseAnalytics.Param.CURRENCY, adValue.currencyCode)
                    }
                    firebaseAnalytics.logEvent("ad_paid_event", revenueParams)
                }
                setFullScreenContentCallback(fullScreenContentCallback)
                show(currentActivity!!)
            }
        } else {
            Log.d(LOG_TAG, "Cannot show ad.")
            fetchAd()
        }

        skipNextAd = false
    }

    /**
     * Force Show the ad on provided activity if one isn't already showing or already user purchased.
     */
    public fun forceShowAdIfAvailable(activity: Activity, adManagerCallback: AdManagerCallback) {


        if (!isShowingAd && isAdAvailable() && !activity.isFinishing) {
            Log.e(LOG_TAG, "Will show ad.")

            val fullScreenContentCallback = object : FullScreenContentCallback() {
                override fun onAdDismissedFullScreenContent() {
                    appOpenAd = null
                    isShowingAd = false
                    AdDebugUtils.logEvent(adUnitId, "onAdDismissed", "App open ad dismissed (forced)", true)
                    fetchAd()
                    adManagerCallback.onNextAction()

                }

                override fun onAdFailedToShowFullScreenContent(adError: AdError) {
                    AdDebugUtils.logEvent(adUnitId, "onFailedToShow", "App open ad failed to show (forced): ${adError.message}", false)
                    // Log Firebase event for ad failed to load
                    val params = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                        putString("ad_error_code", adError.code.toString())
                        if (AdManageKitConfig.enablePerformanceMetrics) {
                            putString("error_message", adError.message)
                        }
                    }
                    firebaseAnalytics.logEvent("ad_failed_to_load", params)
                    adManagerCallback.onNextAction()

                }

                override fun onAdShowedFullScreenContent() {
                    isShowingAd = true
                    isShownAd = true
                    AdDebugUtils.logEvent(adUnitId, "onAdImpression", "App open ad shown (forced)", true)
                    adManagerCallback.onAdLoaded()
                    // Log Firebase event for ad impression
                    val params = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                    }
                    firebaseAnalytics.logEvent(FirebaseAnalytics.Event.AD_IMPRESSION, params)
                }
            }

            appOpenAd?.apply {
                setOnPaidEventListener { adValue ->
                    // Log Firebase event for revenue generated by the ad
                    val adValueInStandardUnits = adValue.valueMicros / 1_000_000.0

                    val revenueParams = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                        putDouble(FirebaseAnalytics.Param.VALUE, adValueInStandardUnits)
                        putString(FirebaseAnalytics.Param.CURRENCY, adValue.currencyCode)
                    }
                    firebaseAnalytics.logEvent("ad_paid_event", revenueParams)
                }
                setFullScreenContentCallback(fullScreenContentCallback)
                show(activity)
            }
        } else {
            adManagerCallback.onNextAction()

            Log.d(LOG_TAG, "Cannot show ad.")
            fetchAd()
        }

        skipNextAd = false
    }


    fun skipNextAd() {
        skipNextAd = true
    }

    /**
     * Request an ad
     */
    public fun fetchAd() {
        if (isAdAvailable()) {
            return
        }
        
        if (!shouldAttemptLoad()) {
            AdDebugUtils.logEvent(adUnitId, "circuitBreakerBlocked", "App open ad loading blocked by circuit breaker", false)
            return
        }
        
        if (AdManageKitConfig.testMode) {
            AdDebugUtils.logEvent(adUnitId, "testMode", "Using test mode for app open ads", true)
        }
        
        val request = getAdRequest()
        AppOpenAd.load(myApplication,
            adUnitId,
            request,
            object : AppOpenAd.AppOpenAdLoadCallback() {
                override fun onAdLoaded(ad: AppOpenAd) {
                    appOpenAd = ad
                    AdDebugUtils.logEvent(adUnitId, "onAdLoaded", "App open ad loaded successfully", true)
                    handleAdSuccess()

                }

                override fun onAdFailedToLoad(loadAdError: LoadAdError) {
                    Log.e(LOG_TAG, "onAdFailedToLoad: failed to load")
                    AdDebugUtils.logEvent(adUnitId, "onFailedToLoad", "App open ad failed to load: ${loadAdError.message}", false)
                    handleAdFailure()

                    // Log Firebase event for ad failed to load
                    val params = Bundle().apply {
                        putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                        putString("ad_error_code", loadAdError.code.toString())
                        if (AdManageKitConfig.enablePerformanceMetrics) {
                            putString("error_message", loadAdError.message)
                        }
                    }
                    firebaseAnalytics.logEvent("ad_failed_to_load", params)

                }
            })
    }

    /**
     * Request an ad with a timeout.
     *
     * @param adLoadCallback The callback to be invoked when the ad is loaded or fails to load.
     * @param timeoutMillis The timeout duration in milliseconds. If the ad does not load within this time, it will trigger the onFailedToLoad callback.
     */
    fun fetchAd(adLoadCallback: AdLoadCallback, timeoutMillis: Long = AdManageKitConfig.appOpenAdTimeout.inWholeMilliseconds) {
        if (isAdAvailable()) {
            adLoadCallback.onAdLoaded()
            return
        }
        
        if (!shouldAttemptLoad()) {
            AdDebugUtils.logEvent(adUnitId, "circuitBreakerBlocked", "App open ad loading blocked by circuit breaker", false)
            val circuitBreakerError = LoadAdError(3, "Circuit breaker is open", "AdManageKit", null, null)
            adLoadCallback.onFailedToLoad(circuitBreakerError)
            return
        }
        
        if (AdManageKitConfig.testMode) {
            AdDebugUtils.logEvent(adUnitId, "testMode", "Using test mode for app open ads with timeout", true)
        }

        val request = getAdRequest()
        val timeoutHandler = Handler(Looper.getMainLooper())
        var hasTimedOut = false

        // Define the timeout runnable
        val timeoutRunnable = Runnable {
            hasTimedOut = true
            val loadAdError = LoadAdError(3, "Ad load timed out", "Google", null, null) // Custom error for timeout
            Log.e(LOG_TAG, "onAdFailedToLoad: timeout after $timeoutMillis ms")
            adLoadCallback.onFailedToLoad(loadAdError)
        }

        // Schedule the timeout
        timeoutHandler.postDelayed(timeoutRunnable, timeoutMillis)

        AppOpenAd.load(
            myApplication,
            adUnitId,
            request,
            object : AppOpenAd.AppOpenAdLoadCallback() {
                override fun onAdLoaded(ad: AppOpenAd) {
                    if (!hasTimedOut) {
                        timeoutHandler.removeCallbacks(timeoutRunnable) // Cancel the timeout
                        appOpenAd = ad
                        AdDebugUtils.logEvent(adUnitId, "onAdLoaded", "App open ad loaded with timeout", true)
                        handleAdSuccess()
                        adLoadCallback.onAdLoaded()
                    }
                }

                override fun onAdFailedToLoad(loadAdError: LoadAdError) {
                    if (!hasTimedOut) {
                        timeoutHandler.removeCallbacks(timeoutRunnable) // Cancel the timeout
                        Log.e(LOG_TAG, "onAdFailedToLoad: failed to load")
                        AdDebugUtils.logEvent(adUnitId, "onFailedToLoad", "App open ad failed with timeout: ${loadAdError.message}", false)
                        handleAdFailure()

                        // Log Firebase event for ad failed to load
                        val params = Bundle().apply {
                            putString(FirebaseAnalytics.Param.AD_UNIT_NAME, adUnitId)
                            putString("ad_error_code", loadAdError.code.toString())
                            if (AdManageKitConfig.enablePerformanceMetrics) {
                                putString("error_message", loadAdError.message)
                            }
                        }
                        firebaseAnalytics.logEvent("ad_failed_to_load", params)

                        adLoadCallback.onFailedToLoad(loadAdError)
                    }
                }
            }
        )
    }



    /**
     * Creates and returns ad request.
     */
    private fun getAdRequest(): AdRequest {
        return AdRequest.Builder().build()
    }

    /**
     * Utility method that checks if ad exists and can be shown.
     */
    fun isAdAvailable(): Boolean {
        return appOpenAd != null
    }

    override fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {}

    override fun onActivityStarted(activity: Activity) {
        currentActivity = activity
    }

    override fun onActivityResumed(activity: Activity) {
        currentActivity = activity
    }

    override fun onActivityStopped(activity: Activity) {}

    override fun onActivityPaused(activity: Activity) {}

    override fun onActivitySaveInstanceState(activity: Activity, outState: Bundle) {}

    override fun onActivityDestroyed(activity: Activity) {
        currentActivity = null
    }

    /**
     * Adds an activity class to the set of excluded activities.
     */
    fun disableAppOpenWithActivity(activityClass: Class<*>) {
        excludedActivities.add(activityClass)
    }

    /**
     * Removes an activity class from the set of excluded activities.
     */
    fun includeAppOpenActivityForAds(activityClass: Class<*>) {
        excludedActivities.remove(activityClass)
    }

    override fun onStart(owner: LifecycleOwner) {
        var purchaseProvider = BillingConfig.getPurchaseProvider()
        if (!purchaseProvider.isPurchased()) {
            showAdIfAvailable()
            Log.d(LOG_TAG, "onStart")
        }
    }
    
    /**
     * Handle ad loading failure for circuit breaker logic
     */
    private fun handleAdFailure() {
        failureCount++
        lastFailureTime = System.currentTimeMillis()
        
        if (failureCount >= AdManageKitConfig.circuitBreakerThreshold) {
            isCircuitBreakerOpen = true
            AdDebugUtils.logEvent(adUnitId, "circuitBreakerOpen", "App open circuit breaker opened after $failureCount failures", false)
        }
    }
    
    /**
     * Handle ad loading success for circuit breaker logic
     */
    private fun handleAdSuccess() {
        if (failureCount > 0) {
            AdDebugUtils.logEvent(adUnitId, "circuitBreakerReset", "App open circuit breaker reset after success", true)
        }
        failureCount = 0
        isCircuitBreakerOpen = false
    }
    
    /**
     * Check if circuit breaker should allow ad loading
     */
    private fun shouldAttemptLoad(): Boolean {
        if (!isCircuitBreakerOpen) return true
        
        val timeSinceLastFailure = System.currentTimeMillis() - lastFailureTime
        if (timeSinceLastFailure > AdManageKitConfig.circuitBreakerResetTimeout.inWholeMilliseconds) {
            isCircuitBreakerOpen = false
            failureCount = 0
            AdDebugUtils.logEvent(adUnitId, "circuitBreakerReset", "App open circuit breaker reset after timeout", true)
            return true
        }
        
        AdDebugUtils.logEvent(adUnitId, "circuitBreakerBlocked", "App open ad blocked by circuit breaker, ${AdManageKitConfig.circuitBreakerResetTimeout.inWholeSeconds - (timeSinceLastFailure / 1000)}s remaining", false)
        return false
    }
}
